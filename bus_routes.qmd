---
title: "GTFS"
author: "Adam Dennett"
---

```{r}
if (!require(devtools)) {
    install.packages('devtools')
}
devtools::install_github('r-gtfs/gtsf')
```

```{r echo=FALSE, message=FALSE, warning=FALSE, error=FALSE, include=FALSE, results='hide'}
library(tidyr)
library(dplyr)
library(writexl)
library(tidyverse)
library(here)
library(janitor)
library(sf)
library(usethis)
library(tmap)
library(readxl)
library(r5r)
library(RColorBrewer)
library(accessibility)
library(data.table)
library(ggplot2)
library(interp)
library(h3jsr)
library(h3r)
library(osmextract)
library(stplanr)
library(od)
library(tidytransit)
```

```{r}
bh_gtfs <- read_gtfs("data/brightonhove_1730981726.zip")
names(bh_gtfs)
BTN_Bus <- gtfs_as_sf(bh_gtfs, skip_shapes = FALSE, crs = 4326, quiet = TRUE)

shapes_sf <- BTN_Bus$shapes

tmap_mode("view")
tm_shape(shapes_sf) +
  tm_lines(col = "shape_id", palette = "Set1", lwd = 1) +
  tm_layout(legend.outside = TRUE)


library(dplyr)

BTN_routes <- BTN_Bus$shapes %>% 
  filter(!shape_id %in% c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14"))

tm_shape(BTN_routes) +
  tm_lines(col = "shape_id", palette = "Set1", lwd = 1) +
  tm_layout(legend.outside = TRUE)

route_5B <- BTN_routes %>% filter(grepl("5B", shape_id))

tm_shape(route_5B) +
  tm_lines(col = "shape_id", palette = "Oranges", lwd = 1) +
  tm_layout(legend.outside = TRUE)

BTN_shapes <- read_gtfs("data/brightonhove_1730981726.zip", files = c("shapes", "trips", "routes"))

names(BTN_shapes)

trip_geom <- get_trip_geometry(BTN_shapes, file = "shapes")
plot(trip_geom$geometry)
```

## School Accessibility Analysis

To carry out an accessibility analysis, information on the full road network in Brighton and Hove is required. This can be obtained from Open Street Map

```{r, warning=FALSE, message=FALSE, echo=FALSE}
data_path = here("data")
# Check what files we have
#list.files(data_path)

# Allow 10 GiB of memory
rJava::.jinit()
rJava::.jcall("java.lang.System", "S", "getProperty", "java.version")
options(java.parameters = "-Xmx10G")

library(r5r)
library(accessibility)
library(sf)
library(data.table)
library(ggplot2)
library(interp)
library(h3jsr)
library(h3r)
library(dplyr)
library(osmextract)

brighton_oa <- st_read(here("data","oa_brighton.geojson"))

#oe_match("East Sussex")
roads_w_sussex = oe_get(c("West Sussex"), stringsAsFactors = FALSE, quiet = TRUE)
roads_e_sussex = oe_get(c("East Sussex"), stringsAsFactors = FALSE, quiet = TRUE)
#names(roads_w_sussex)
#summary(roads_w_sussex)

ht = c("motorway", "trunk", "primary", "secondary", "tertiary", "residential", "unclassified")
osm_w_sussex_maj_roads = roads_w_sussex[roads_w_sussex$highway %in% ht, ]
#class(osm_w_sussex_maj_roads)
osm_e_sussex_maj_roads = roads_e_sussex[roads_e_sussex$highway %in% ht, ]

osm_sussex_maj_roads <- rbind(osm_w_sussex_maj_roads, osm_e_sussex_maj_roads) %>% st_transform(27700)
#summary(osm_sussex_maj_roads)
#summary(brighton_oa)

#osm_roads_buffered <- st_buffer(osm_sussex_maj_roads, dist = 100)
brighton_oa_buffer <- st_buffer(brighton_oa, dist = 500)
brighton_blob <- st_union(brighton_oa_buffer)

#tm_shape(brighton_blob) +
 # tm_polygons(alpha = 0.5)

brighton_roads <- st_intersection(osm_sussex_maj_roads, brighton_blob)

tm_shape(brighton_roads) +
  tm_lines()

#going to need to write this out as a shapefile and then use JOSM to convert to a PBF file - https://josm.openstreetmap.de/ 
#st_write(brighton_roads, "data/brighton_roads.shp", append=FALSE)

```

## 

The R5R package - <https://ipeagit.github.io/r5r/> - can be used to calculate the travel times between all of the Output Areas and Schools in Brighton and Hove by car, foot and bus.

```{r, warning=FALSE, message=FALSE, echo=FALSE}
# Create the routable network by indicating the path where OSM, GTFS and possible DEM data are stored
r5r_core = setup_r5(data_path = data_path)
```

```{r, warning=FALSE, message=FALSE, echo=FALSE}

#Fix the school and school data so r5 can handle it
#schools first

brighton_sec_schools <- read_csv("https://www.dropbox.com/scl/fi/fhzafgt27v30lmmuo084y/edubasealldata20241003.csv?rlkey=uorw43s44hnw5k9js3z0ksuuq&raw=1") %>% 
  clean_names() %>% 
  filter(la_name == "Brighton and Hove") %>% 
  filter(phase_of_education_name == "Secondary") %>% 
  filter(establishment_status_name == "Open") %>%
  st_as_sf(., coords = c("easting", "northing")) %>% 
  st_set_crs(27700) %>% 
  st_transform(4326) %>% 
  st_set_crs(4326)

bh_sec_sch <- brighton_sec_schools %>% 
  select(urn, establishment_name, geometry) %>%
  rename(id = urn)

coords <- st_coordinates(bh_sec_sch)
bh_sec_sch$lon <- coords[, 1]
bh_sec_sch$lat <- coords[, 2]

#summary(bh_sec_sch)

#now the output areas
#brighton_oa_points_r5 <- brighton_oa_points %>% 
#  select(gid, oa21cd,lat, long) %>% 
#  rename(lon = long, lat = lat, id = gid) %>% 
#  st_transform(4326) %>% 
#  st_set_crs(4326)

#summary(brighton_oa_points_r5)

```

```{r, warning=FALSE, message=FALSE, echo=FALSE}
#visualise the spatial data
brighton_outline <- st_union(brighton_oa) %>% st_transform(4326)
#summary(brighton_oa)

# qtm(brighton_outline, fill = "white") +
#   qtm(brighton_oa_points_r5, size = 0.5, col = "red") +
#   qtm(bh_sec_sch, size = 0.5, col = "blue")

brighton_h3 <- polygon_to_cells(brighton_oa, res = 11, simple = F)
brighton_h3 <- cell_to_polygon(unlist(brighton_h3$h3_addresses), simple = FALSE)
brighton_h3_centroids <- st_centroid(brighton_h3)

qtm(brighton_h3, fill = "red", alpha = 0.5) 

```

```{r, warning=FALSE, message=FALSE, echo=FALSE}
#generate a fine-grained spatial hex grid for Brighton
brighton_h3_centroids <- mutate(brighton_h3_centroids, id = row_number())
brighton_h3 <- mutate(brighton_h3, id = row_number())

# Set parameters
mode = c("WALK", "BUS")
max_walk_time = 360 # minutes
max_trip_duration = 360 # minutes
departure_datetime = as.POSIXct("23-05-2024 8:30:00", 
                                format = "%d-%m-%Y %H:%M:%S", 
                                tz = "GMT")

#note the code below already requires the h3 core matrix to be set up

# Calculate the travel time matrix by Transit
ttm_brighton_h3 = travel_time_matrix(r5r_core = r5r_core,
                          origins = bh_sec_sch,
                          destinations = brighton_h3_centroids,
                          mode = mode,
                          departure_datetime = departure_datetime,
                          max_walk_time = max_walk_time,
                          max_trip_duration = max_trip_duration)

```

```{r, warning=FALSE, message=FALSE, echo=FALSE}
#Now join travel time matrix back to H3 cells

# Find out the travel time to closest school
closest = aggregate(ttm_brighton_h3$travel_time_p50, by=list(ttm_brighton_h3$to_id), FUN=min, na.rm=TRUE)

#summary(closest)
closest <- rename(closest, id = Group.1) 
closest <- rename(closest, time = x)

closest["id"] = as.integer(closest$id)

geo = inner_join(brighton_h3_centroids, closest, by="id")
geo_hex = inner_join(brighton_h3, closest, by="id")

```

## Walking Travel Times to Secondary Schools in Brighton

The map below shows the walking travel times to the nearest secondary school in Brighton and Hove from each school. The travel times are calculated using the R5R package and are based on people walking along the Open Street Map road network.

Notably, we can see that at present, most children in most catchments can reasonably be expected to walk to their nearest secondary school in under 1hr. The exceptions are those who live in Whitehawk and Bevendean in the East of the City - areas which are persistently ranked as the most deprived in the city.

```{r, warning=FALSE, message=FALSE, echo=FALSE}
tm_shape(geo) + 
  tm_symbols(col="time", size=0.05, border.lwd=0, style="pretty", n=10, palette="RdYlBu", alpha = 0.3) + 
  tm_layout(legend.title.size = 1.5) +
tm_shape(bh_sec_sch) +
  tm_dots(col = "black", border.lwd=0) + 
  tm_layout(title = "Walk-Time (Minutes) to Secondary Schools",legend.position = c("left", "bottom"))
```

```{r, warning=FALSE, message=FALSE, echo=FALSE}
bh_sec_sch1 <- bh_sec_sch %>% 
  filter(id == "114581")
```

More analysis and validation of these preliminary results is required and indeed should have been carried out by Brighton and Hove Council already, but there are suggestions in the analysis that accessibility by Bus is not hugely different to walking after taking bus stop waiting times and walk times to stops into consideration.

R5R takes GTFS data available from <https://mobilitydatabase.org/> and uses detailed timetable information to generate these estimate, however, more work is needed to be confident of the patterns observed.

However, Zooming in to Longhill High School in Rottingdean can calulating bus accessibility from the School, we can see that after taking wait-times into consideration, it might take at least 30 minutes to access even the A259 in Rottingdean, let alone access the City Centre.

Given that under Option B, there is a high probability that singificant numbers of pupils from Central Brighton would be forced to attend Longhill, this is a significant issue.

When we look at the Car travel times in the map below that, it becomes clear what options most might be forced into taking.

```{r, warning=FALSE, message=FALSE, echo=FALSE}
# Set parameters
mode = c("BUS", "WALK")
max_walk_time = 360 # minutes
max_trip_duration = 360 # minutes
departure_datetime = as.POSIXct("23-05-2024 8:30:00",
                                 format = "%d-%m-%Y %H:%M:%S", 
                                tz = "GMT")

#note the code below already requires the h3 core matrix to be set up

# Calculate the travel time matrix by Transit
ttm_brighton_h3_1 = travel_time_matrix(r5r_core = r5r_core,
                          origins = bh_sec_sch1,
                          destinations = brighton_h3_centroids,
                          mode = mode,
                          departure_datetime = departure_datetime,
                          max_walk_time = max_walk_time,
                          max_trip_duration = max_trip_duration)

# Find out the travel time to closest school
closest_1 = aggregate(ttm_brighton_h3_1$travel_time_p50, by=list(ttm_brighton_h3_1$to_id), FUN=min, na.rm=TRUE)

closest_1 <- rename(closest_1, id = Group.1) 
closest_1 <- rename(closest_1, time = x)

closest_1["id"] = as.integer(closest_1$id)

geo_1 = inner_join(brighton_h3_centroids, closest_1, by="id")
geo_hex_1 = inner_join(brighton_h3, closest_1, by="id")

tm_shape(geo_1) + 
  tm_symbols(col="time", size=0.5, border.lwd=0, style="pretty", n=10, palette="-magma", alpha = 0.3) + 
  tm_layout(legend.title.size = 1.5) +
tm_shape(bh_sec_sch1) +
  tm_dots(col = "black", border.lwd=0) + 
  tm_layout(title = "Bus / Walk Travel Time (incoporating waiting)",legend.position = c("left", "bottom"))
```

```{r, warning=FALSE, message=FALSE, echo=FALSE}
# Set parameters
mode = c("CAR")
max_walk_time = 30 # minutes
max_trip_duration = 60 # minutes
departure_datetime = as.POSIXct("23-05-2024 8:30:00",
                                 format = "%d-%m-%Y %H:%M:%S")

#note the code below already requires the h3 core matrix to be set up

# Calculate the travel time matrix by Transit
ttm_brighton_h3_1 = travel_time_matrix(r5r_core = r5r_core,
                          origins = bh_sec_sch1,
                          destinations = brighton_h3_centroids,
                          mode = mode,
                          departure_datetime = departure_datetime,
                          max_walk_time = max_walk_time,
                          max_trip_duration = max_trip_duration)

# Find out the travel time to closest school
closest_1 = aggregate(ttm_brighton_h3_1$travel_time_p50, by=list(ttm_brighton_h3_1$to_id), FUN=min, na.rm=TRUE)

closest_1 <- rename(closest_1, id = Group.1) 
closest_1 <- rename(closest_1, time = x)

closest_1["id"] = as.integer(closest_1$id)

geo_1 = inner_join(brighton_h3_centroids, closest_1, by="id")
geo_hex_1 = inner_join(brighton_h3, closest_1, by="id")

tm_shape(geo_1) + 
  tm_symbols(col="time", size=0.5, border.lwd=0, style="pretty", n=10, palette="-magma", alpha = 0.3) + 
  tm_layout(legend.title.size = 1.5) +
tm_shape(bh_sec_sch1) +
  tm_dots(col = "black", border.lwd=0) + 
tm_shape(bh_catchments) +
  tm_polygons(alpha = 0) +
  tm_layout(title = "Car Travel Time",legend.position = c("left", "bottom"))
```

```{r, warning=FALSE, message=FALSE, echo=FALSE}
r5r::stop_r5(r5r_core)
rJava::.jgc(R.gc = TRUE)
```
